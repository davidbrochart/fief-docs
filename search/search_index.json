{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Fief? Fief is an open-source platform to manage users and authentication in your applications. Our goal is to help you manage users and security in a matter of minutes, not days. Key features: Pre-built login and registration pages Users management dashboard SDK for the most popular languages and frameworks Integrations for the most popular no-code tools Bring Your Own Database : you can connect to any SQL database so you keep entire control of your data Cloud vs Self-hosted We are offering two ways of using Fief: Cloud : fair-priced hosted instance, maintained by the Fief's team; Self-hosted: you host the service yourself on your own infrastructure, for free.","title":"What is Fief?"},{"location":"#what-is-fief","text":"Fief is an open-source platform to manage users and authentication in your applications. Our goal is to help you manage users and security in a matter of minutes, not days. Key features: Pre-built login and registration pages Users management dashboard SDK for the most popular languages and frameworks Integrations for the most popular no-code tools Bring Your Own Database : you can connect to any SQL database so you keep entire control of your data","title":"What is Fief?"},{"location":"#cloud-vs-self-hosted","text":"We are offering two ways of using Fief: Cloud : fair-priced hosted instance, maintained by the Fief's team; Self-hosted: you host the service yourself on your own infrastructure, for free.","title":"Cloud vs Self-hosted"},{"location":"integrate/javascript/","text":"\ud83d\udfe8 JavaScript","title":"\ud83d\udfe8 JavaScript"},{"location":"integrate/javascript/#javascript","text":"","title":"\ud83d\udfe8 JavaScript"},{"location":"integrate/nodejs/","text":"\ud83d\udfe2 NodeJS","title":"\ud83d\udfe2 NodeJS"},{"location":"integrate/nodejs/#nodejs","text":"","title":"\ud83d\udfe2 NodeJS"},{"location":"integrate/python/","text":"Python We provide an official client for Python. You can install it with pip : pip install fief-client Create a Fief client The Fief client provides all the necessary methods to manage OAuth2 authentication, validate access tokens and refresh them.","title":"Python"},{"location":"integrate/python/#python","text":"We provide an official client for Python. You can install it with pip : pip install fief-client","title":"Python"},{"location":"integrate/python/#create-a-fief-client","text":"The Fief client provides all the necessary methods to manage OAuth2 authentication, validate access tokens and refresh them.","title":"Create a Fief client"},{"location":"integrate/python/fastapi/","text":"FastAPI","title":"FastAPI"},{"location":"integrate/python/fastapi/#fastapi","text":"","title":"FastAPI"},{"location":"integrate/python/flask/","text":"Flask","title":"Flask"},{"location":"integrate/python/flask/#flask","text":"","title":"Flask"},{"location":"miscellaneous/resources/","text":"Resources RFC7517 (JSON Web Key): https://datatracker.ietf.org/doc/html/rfc7517 RFC7636 (OAuth2 PKCE): https://datatracker.ietf.org/doc/html/rfc7636 OpenID Connect 1.0 specification: https://openid.net/specs/openid-connect-core-1_0.html JWCrypto's library documentation: https://jwcrypto.readthedocs.io/","title":"Resources"},{"location":"miscellaneous/resources/#resources","text":"RFC7517 (JSON Web Key): https://datatracker.ietf.org/doc/html/rfc7517 RFC7636 (OAuth2 PKCE): https://datatracker.ietf.org/doc/html/rfc7636 OpenID Connect 1.0 specification: https://openid.net/specs/openid-connect-core-1_0.html JWCrypto's library documentation: https://jwcrypto.readthedocs.io/","title":"Resources"},{"location":"partials/environment-variables-callout/","text":"Info You can read about different ways of setting environment variables in the dedicated section .","title":"Environment variables callout"},{"location":"self-hosting/environment-variables/","text":"Environment variables Fief server relies heavily on environment variables for configuration. You'll likely need to adjust those settings for your deployment. Set environment variables Using docker run When running Fief server with Docker, the most straightforward way is to use the -e option on the command line, as shown in the Quickstart section. docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest However, it may become hard to maintain when having lot of variables to set. An alternative way is to use a .env file. It's a simple file where each line consists of a key and a value separated by an equal sign: .env SECRET = XXX FIEF_CLIENT_ID = XXX FIEF_CLIENT_SECRET = XXX ENCRYPTION_KEY = XXX Then, you can reference this file in the Docker command: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ --env-file .env \\ ghcr.io/fief-dev/fief:latest Using Docker Compose For more complex setups, you may need to configure a Docker Compose file to help you manage all your containers. You can directly define your environment variables in the Compose file. You'll find below an example of a Docker Compose file to run the Fief server. docker-compose.yml version : \"3.9\" services : fief : image : ghcr.io/fief-dev/fief:latest ports : - \"80:8000\" environment : - SECRET=XXX - FIEF_CLIENT_ID=XXX - FIEF_CLIENT_SECRET=XXX - ENCRYPTION_KEY=XXX Reference For each variable, we'll try to provide a sensible example value to help you configure it correctly. Throughout the examples, we'll assume that you host your Fief server on the sub-domain fief.bretagne.duchy . General Name Description Default Allowed values Example ENVIRONMENT Name of the deployment environment development development, staging, production production LOG_LEVEL Log verbosity DEBUG DEBUG, INFO, WARNING, ERROR INFO ROOT_DOMAIN Root domain where your server will be running. Mainly used for generating workspace subdomains. localhost bretagne.duchy ALLOW_ORIGIN_REGEX Regex used to control CORS access to your API http://.*localhost:[0-9]+ https://.*\\.bretagne.duchy Secrets Name Description Default Allowed values Example SECRET Secret value used to sign reset password tokens. Any sufficiently long string ENCRYPTION_KEY Key used to encrypt the external databases credentials inside the main database A valid Fernet key encoded in UTF-8 Database Name Description Default Allowed values Example DATABASE_TYPE Type of the main database SQLITE POSTGRESQL, MYSQL, SQLITE POSTGRESQL DATABASE_HOST Host of the main database localhost DATABASE_PORT Listening port of the main database 5432 DATABASE_USERNAME Main database user fief DATABASE_PASSWORD Main database user's password fiefpassword DATABASE_NAME Main database name fief.db fief DATABASE_LOCATION For SQLite databases, path where to store the database files Current working directory DATABASE_URL Full database connection string, useful for some cloud providers. It'll take precedence over the single parameters above. More details about how to setup a database in the dedicated section. Setup database Redis We use a Redis instance to manage background jobs (send emails, heavy computations...). A Redis instance is already up-and-running in the official Docker image, but you can provide your own one if needed. Name Description Default Allowed values Example REDIS_URL URL of a Redis server redis://localhost:6379 Email provider Name Description Default Allowed values Example EMAIL_PROVIDER Type of email provider NULL NULL, POSTMARK POSTMARK EMAIL_PROVIDER_PARAMS Configuration dictionary of the email provider {} {\"server_token\": \"XXX-XXX\"} More details about how to setup an email provider in the dedicated section. Setup email provider CSRF cookie To protect against Cross-Site-Request-Forgery attacks on authentication pages, we use the double-submit cookie pattern. Name Description Default Allowed values Example CSRF_COOKIE_NAME Name of the CSRF token cookie fief_csrftoken CSRF_COOKIE_SECURE Secure flag of the login session cookie True Login session A login session is a cookie used to maintain the state of the login flow of a user, from the login page until they're redirected to your application. Name Description Default Allowed values Example LOGIN_SESSION_COOKIE_NAME Name of the login session cookie fief_login_session LOGIN_SESSION_COOKIE_DOMAIN Domain of the login session cookie Empty string LOGIN_SESSION_COOKIE_SECURE Secure flag of the login session cookie True Session A session is a cookie used to maintain the session of a user on the Fief authentication pages . It's different from the session you'll maintain in your own application. Its purpose is to allow a user to re-authenticate quickly to your app without having them to input their credentials again. Name Description Default Allowed values Example SESSION_COOKIE_NAME Name of the session cookie fief_session SESSION_COOKIE_DOMAIN Domain of the session cookie Empty string SESSION_COOKIE_SECURE Secure flag of the session cookie True SESSION_LIFETIME_SECONDS Lifetime of the session cookie in seconds 86400 * 30 (30 days ) Fief-ception Fief-ception is a mind-fucking concept describing the fact that we actually use Fief to authenticate Fief users to the app \ud83e\udd2f That's why we necessarily need to create a first workspace and an admin user before being able to use Fief, as described in the Quickstart section. The variables below are here to configure the Fief server with a proper Fief client, as you would do in your own application! Name Description Default Allowed values Example FIEF_DOMAIN Domain of your main Fief workspace localhost fief.bretagne.duchy FIEF_BASE_URL URL of the main Fief workspace. It calls itself! http://localhost https://fief.bretagne.duchy FIEF_CLIENT_ID Client ID in your main Fief workspace FIEF_CLIENT_SECRET Client secret in your main Fief workspace FIEF_ENCRYPTION_KEY Optional RSA key used to encrypt the JWT tokens Admin session An admin session is a cookie used to maintain the session of a user on the Fief admin dashboard. Name Description Default Allowed values Example FIEF_ADMIN_SESSION_COOKIE_NAME Name of the admin session cookie fief_admin_session FIEF_ADMIN_SESSION_COOKIE_DOMAIN Domain of the admin session cookie Empty string FIEF_ADMIN_SESSION_COOKIE_SECURE Secure flag of the admin session cookie True","title":"Environment variables"},{"location":"self-hosting/environment-variables/#environment-variables","text":"Fief server relies heavily on environment variables for configuration. You'll likely need to adjust those settings for your deployment.","title":"Environment variables"},{"location":"self-hosting/environment-variables/#set-environment-variables","text":"","title":"Set environment variables"},{"location":"self-hosting/environment-variables/#using-docker-run","text":"When running Fief server with Docker, the most straightforward way is to use the -e option on the command line, as shown in the Quickstart section. docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest However, it may become hard to maintain when having lot of variables to set. An alternative way is to use a .env file. It's a simple file where each line consists of a key and a value separated by an equal sign: .env SECRET = XXX FIEF_CLIENT_ID = XXX FIEF_CLIENT_SECRET = XXX ENCRYPTION_KEY = XXX Then, you can reference this file in the Docker command: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ --env-file .env \\ ghcr.io/fief-dev/fief:latest","title":"Using docker run"},{"location":"self-hosting/environment-variables/#using-docker-compose","text":"For more complex setups, you may need to configure a Docker Compose file to help you manage all your containers. You can directly define your environment variables in the Compose file. You'll find below an example of a Docker Compose file to run the Fief server. docker-compose.yml version : \"3.9\" services : fief : image : ghcr.io/fief-dev/fief:latest ports : - \"80:8000\" environment : - SECRET=XXX - FIEF_CLIENT_ID=XXX - FIEF_CLIENT_SECRET=XXX - ENCRYPTION_KEY=XXX","title":"Using Docker Compose"},{"location":"self-hosting/environment-variables/#reference","text":"For each variable, we'll try to provide a sensible example value to help you configure it correctly. Throughout the examples, we'll assume that you host your Fief server on the sub-domain fief.bretagne.duchy .","title":"Reference"},{"location":"self-hosting/environment-variables/#general","text":"Name Description Default Allowed values Example ENVIRONMENT Name of the deployment environment development development, staging, production production LOG_LEVEL Log verbosity DEBUG DEBUG, INFO, WARNING, ERROR INFO ROOT_DOMAIN Root domain where your server will be running. Mainly used for generating workspace subdomains. localhost bretagne.duchy ALLOW_ORIGIN_REGEX Regex used to control CORS access to your API http://.*localhost:[0-9]+ https://.*\\.bretagne.duchy","title":"General"},{"location":"self-hosting/environment-variables/#secrets","text":"Name Description Default Allowed values Example SECRET Secret value used to sign reset password tokens. Any sufficiently long string ENCRYPTION_KEY Key used to encrypt the external databases credentials inside the main database A valid Fernet key encoded in UTF-8","title":"Secrets"},{"location":"self-hosting/environment-variables/#database","text":"Name Description Default Allowed values Example DATABASE_TYPE Type of the main database SQLITE POSTGRESQL, MYSQL, SQLITE POSTGRESQL DATABASE_HOST Host of the main database localhost DATABASE_PORT Listening port of the main database 5432 DATABASE_USERNAME Main database user fief DATABASE_PASSWORD Main database user's password fiefpassword DATABASE_NAME Main database name fief.db fief DATABASE_LOCATION For SQLite databases, path where to store the database files Current working directory DATABASE_URL Full database connection string, useful for some cloud providers. It'll take precedence over the single parameters above. More details about how to setup a database in the dedicated section. Setup database","title":"Database"},{"location":"self-hosting/environment-variables/#redis","text":"We use a Redis instance to manage background jobs (send emails, heavy computations...). A Redis instance is already up-and-running in the official Docker image, but you can provide your own one if needed. Name Description Default Allowed values Example REDIS_URL URL of a Redis server redis://localhost:6379","title":"Redis"},{"location":"self-hosting/environment-variables/#email-provider","text":"Name Description Default Allowed values Example EMAIL_PROVIDER Type of email provider NULL NULL, POSTMARK POSTMARK EMAIL_PROVIDER_PARAMS Configuration dictionary of the email provider {} {\"server_token\": \"XXX-XXX\"} More details about how to setup an email provider in the dedicated section. Setup email provider","title":"Email provider"},{"location":"self-hosting/environment-variables/#csrf-cookie","text":"To protect against Cross-Site-Request-Forgery attacks on authentication pages, we use the double-submit cookie pattern. Name Description Default Allowed values Example CSRF_COOKIE_NAME Name of the CSRF token cookie fief_csrftoken CSRF_COOKIE_SECURE Secure flag of the login session cookie True","title":"CSRF cookie"},{"location":"self-hosting/environment-variables/#login-session","text":"A login session is a cookie used to maintain the state of the login flow of a user, from the login page until they're redirected to your application. Name Description Default Allowed values Example LOGIN_SESSION_COOKIE_NAME Name of the login session cookie fief_login_session LOGIN_SESSION_COOKIE_DOMAIN Domain of the login session cookie Empty string LOGIN_SESSION_COOKIE_SECURE Secure flag of the login session cookie True","title":"Login session"},{"location":"self-hosting/environment-variables/#session","text":"A session is a cookie used to maintain the session of a user on the Fief authentication pages . It's different from the session you'll maintain in your own application. Its purpose is to allow a user to re-authenticate quickly to your app without having them to input their credentials again. Name Description Default Allowed values Example SESSION_COOKIE_NAME Name of the session cookie fief_session SESSION_COOKIE_DOMAIN Domain of the session cookie Empty string SESSION_COOKIE_SECURE Secure flag of the session cookie True SESSION_LIFETIME_SECONDS Lifetime of the session cookie in seconds 86400 * 30 (30 days )","title":"Session"},{"location":"self-hosting/environment-variables/#fief-ception","text":"Fief-ception is a mind-fucking concept describing the fact that we actually use Fief to authenticate Fief users to the app \ud83e\udd2f That's why we necessarily need to create a first workspace and an admin user before being able to use Fief, as described in the Quickstart section. The variables below are here to configure the Fief server with a proper Fief client, as you would do in your own application! Name Description Default Allowed values Example FIEF_DOMAIN Domain of your main Fief workspace localhost fief.bretagne.duchy FIEF_BASE_URL URL of the main Fief workspace. It calls itself! http://localhost https://fief.bretagne.duchy FIEF_CLIENT_ID Client ID in your main Fief workspace FIEF_CLIENT_SECRET Client secret in your main Fief workspace FIEF_ENCRYPTION_KEY Optional RSA key used to encrypt the JWT tokens","title":"Fief-ception"},{"location":"self-hosting/environment-variables/#admin-session","text":"An admin session is a cookie used to maintain the session of a user on the Fief admin dashboard. Name Description Default Allowed values Example FIEF_ADMIN_SESSION_COOKIE_NAME Name of the admin session cookie fief_admin_session FIEF_ADMIN_SESSION_COOKIE_DOMAIN Domain of the admin session cookie Empty string FIEF_ADMIN_SESSION_COOKIE_SECURE Secure flag of the admin session cookie True","title":"Admin session"},{"location":"self-hosting/quickstart/","text":"Quickstart We provide a Docker image to help you start the Fief server locally in no time! Run the following command: docker run --rm ghcr.io/fief-dev/fief:latest fief quickstart --docker The result of this command is a complete docker run command with the required secrets generated to help you get started. It'll look like the following: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest Save those secrets somewhere safe! If you need restart or recreate your container, you'll probably need to set the same secrets again. If you lose them, you'll likely lose access to data or have a bad configuration. Read more about secrets and environment variables. Info The container is exposed on the port 8000 of your local machine by default, but you can set any port you want. Create main workspace Next, you'll need to create the main workspace . Simply run the following command: docker exec fief-server fief create-main-workspace You should see the following output: Main Fief workspace created Create admin user Finally, you need to create an admin user for this main workspace that'll have access to the admin dashboard. Run the following command: docker exec -it fief-server fief create-main-user --user-email anne@bretagne.duchy Info Of course, make sure to replace --user-email value with your own email address! You'll then be prompted for a password. If everything goes well, you should see the following output: Main Fief user created Good to go! At this point, your Fief server should be up-and-running! Open http://localhost:8000/admin/ to access the admin dashboard. You'll be redirected to a login page. Authenticate with the user credentials you created in the previous section. You'll then be redirected to the admin dashboard. Congratulations! Your Fief server instance is up-and-running \ud83c\udf89 You can now try Fief features and start to integrate authentication in your app. Info For production deployment, we strongly recommend you to read the next sections. Limitations While quick and convenient, this way of running Fief is not suitable for production environments . Under the hood, it stores the data in the form of SQLite databases . If you ever happen to destroy your container, you'll lose all your data. The best way is of course to configure a proper PostgreSQL or MySQL database for your Fief server, as described in the dedicated section. Setup database Use a Docker volume to persist SQLite data If you really want to use SQLite, or mitigate the risk of losing data in your local environment, you can attach your container to a Docker volume . This way, even if the container is destroyed, you can create a new one and attach again the data. The first thing to do is to create a Docker volume: docker volume create fief-server-data Then, create your Fief server container and attach this volume to the /data folder on the container: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -v fief-server-volume:/data \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest Info If you created your container with the instructions in the previous section, you'll need to recreate one from scratch to bind the volume.","title":"Quickstart"},{"location":"self-hosting/quickstart/#quickstart","text":"We provide a Docker image to help you start the Fief server locally in no time! Run the following command: docker run --rm ghcr.io/fief-dev/fief:latest fief quickstart --docker The result of this command is a complete docker run command with the required secrets generated to help you get started. It'll look like the following: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest Save those secrets somewhere safe! If you need restart or recreate your container, you'll probably need to set the same secrets again. If you lose them, you'll likely lose access to data or have a bad configuration. Read more about secrets and environment variables. Info The container is exposed on the port 8000 of your local machine by default, but you can set any port you want.","title":"Quickstart"},{"location":"self-hosting/quickstart/#create-main-workspace","text":"Next, you'll need to create the main workspace . Simply run the following command: docker exec fief-server fief create-main-workspace You should see the following output: Main Fief workspace created","title":"Create main workspace"},{"location":"self-hosting/quickstart/#create-admin-user","text":"Finally, you need to create an admin user for this main workspace that'll have access to the admin dashboard. Run the following command: docker exec -it fief-server fief create-main-user --user-email anne@bretagne.duchy Info Of course, make sure to replace --user-email value with your own email address! You'll then be prompted for a password. If everything goes well, you should see the following output: Main Fief user created","title":"Create admin user"},{"location":"self-hosting/quickstart/#good-to-go","text":"At this point, your Fief server should be up-and-running! Open http://localhost:8000/admin/ to access the admin dashboard. You'll be redirected to a login page. Authenticate with the user credentials you created in the previous section. You'll then be redirected to the admin dashboard. Congratulations! Your Fief server instance is up-and-running \ud83c\udf89 You can now try Fief features and start to integrate authentication in your app. Info For production deployment, we strongly recommend you to read the next sections.","title":"Good to go!"},{"location":"self-hosting/quickstart/#limitations","text":"While quick and convenient, this way of running Fief is not suitable for production environments . Under the hood, it stores the data in the form of SQLite databases . If you ever happen to destroy your container, you'll lose all your data. The best way is of course to configure a proper PostgreSQL or MySQL database for your Fief server, as described in the dedicated section. Setup database","title":"Limitations"},{"location":"self-hosting/quickstart/#use-a-docker-volume-to-persist-sqlite-data","text":"If you really want to use SQLite, or mitigate the risk of losing data in your local environment, you can attach your container to a Docker volume . This way, even if the container is destroyed, you can create a new one and attach again the data. The first thing to do is to create a Docker volume: docker volume create fief-server-data Then, create your Fief server container and attach this volume to the /data folder on the container: docker run \\ --name fief-server \\ -p 8000 :80 -d \\ -v fief-server-volume:/data \\ -e \"SECRET=XXX\" \\ -e \"FIEF_CLIENT_ID=XXX\" \\ -e \"FIEF_CLIENT_SECRET=XXX\" \\ -e \"ENCRYPTION_KEY=XXX\" \\ ghcr.io/fief-dev/fief:latest Info If you created your container with the instructions in the previous section, you'll need to recreate one from scratch to bind the volume.","title":"Use a Docker volume to persist SQLite data"},{"location":"self-hosting/setup-database/","text":"Setup database For production environments, your Fief server should store its data in a proper database server for better performance and reliability. Fief is compatible with PostgreSQL and MySQL databases. Setup PostgreSQL We'll assume that you have a working PostgreSQL database running, either locally or in the cloud. All you need to do is to set the corresponding environment variables with your database credentials. DATABASE_TYPE = POSTGRESQL DATABASE_HOST = localhost DATABASE_PORT = 5432 DATABASE_USERNAME = fief DATABASE_PASSWORD = fiefpassword DATABASE_NAME = fief Info You can read about different ways of setting environment variables in the dedicated section . Setup MySQL We'll assume that you have a working MySQL database running, either locally or in the cloud. All you need to do is to set the corresponding environment variables with your database credentials. DATABASE_TYPE = MYSQL DATABASE_HOST = localhost DATABASE_PORT = 3306 DATABASE_USERNAME = fief DATABASE_PASSWORD = fiefpassword DATABASE_NAME = fief Info You can read about different ways of setting environment variables in the dedicated section . Use a connection string Some cloud providers like Heroku will provide you a full database connection string like the one below instead of each parts separately: postgresql://fief:fiefpassword@localhost:5432/fief Fief supports this kind of configuration with the DATABASE_URL environment variable. DATABASE_TYPE = POSTGRESQL DATABASE_URL = postgresql://fief:fiefpassword@localhost:5432/fief Warning This variable will always take precedence over the single parameters: if you define DATABASE_URL , it'll use this variable to connect to your database, even if other parameters are defined. Create main workspace and admin user Once your database is configured, don't forget to create the main workspace and admin user, as described in the Quickstart section.","title":"Setup database"},{"location":"self-hosting/setup-database/#setup-database","text":"For production environments, your Fief server should store its data in a proper database server for better performance and reliability. Fief is compatible with PostgreSQL and MySQL databases.","title":"Setup database"},{"location":"self-hosting/setup-database/#setup-postgresql","text":"We'll assume that you have a working PostgreSQL database running, either locally or in the cloud. All you need to do is to set the corresponding environment variables with your database credentials. DATABASE_TYPE = POSTGRESQL DATABASE_HOST = localhost DATABASE_PORT = 5432 DATABASE_USERNAME = fief DATABASE_PASSWORD = fiefpassword DATABASE_NAME = fief Info You can read about different ways of setting environment variables in the dedicated section .","title":"Setup PostgreSQL"},{"location":"self-hosting/setup-database/#setup-mysql","text":"We'll assume that you have a working MySQL database running, either locally or in the cloud. All you need to do is to set the corresponding environment variables with your database credentials. DATABASE_TYPE = MYSQL DATABASE_HOST = localhost DATABASE_PORT = 3306 DATABASE_USERNAME = fief DATABASE_PASSWORD = fiefpassword DATABASE_NAME = fief Info You can read about different ways of setting environment variables in the dedicated section .","title":"Setup MySQL"},{"location":"self-hosting/setup-database/#use-a-connection-string","text":"Some cloud providers like Heroku will provide you a full database connection string like the one below instead of each parts separately: postgresql://fief:fiefpassword@localhost:5432/fief Fief supports this kind of configuration with the DATABASE_URL environment variable. DATABASE_TYPE = POSTGRESQL DATABASE_URL = postgresql://fief:fiefpassword@localhost:5432/fief Warning This variable will always take precedence over the single parameters: if you define DATABASE_URL , it'll use this variable to connect to your database, even if other parameters are defined.","title":"Use a connection string"},{"location":"self-hosting/setup-database/#create-main-workspace-and-admin-user","text":"Once your database is configured, don't forget to create the main workspace and admin user, as described in the Quickstart section.","title":"Create main workspace and admin user"},{"location":"self-hosting/setup-email-provider/","text":"Setup email provider As you surely now, users management imply a lot of transactional emails, like welcome emails or reset password emails. To be able to send them, Fief needs an email provider. Currently, Fief only supports Postmark , one of the leading email delivery service on the market, but we may support more in the future. There are two environment variables to configure the email provider: EMAIL_PROVIDER , to set the type of provider and EMAIL_PROVIDER_PARAMS , a configuration dictionary containing required configuration keys. NULL provider The NULL provider is the default one if you don't set any. It means that no transactional email will be sent . EMAIL_PROVIDER = NULL Postmark provider Postmark provider will send transactional emails using Postmark . Parameter Description server_token Your Postmark Server API token EMAIL_PROVIDER = POSTMARK EMAIL_PROVIDER_PARAMS = {\"server_token\": \"XXX-XXX\"} Info You can read about different ways of setting environment variables in the dedicated section .","title":"Setup email provider"},{"location":"self-hosting/setup-email-provider/#setup-email-provider","text":"As you surely now, users management imply a lot of transactional emails, like welcome emails or reset password emails. To be able to send them, Fief needs an email provider. Currently, Fief only supports Postmark , one of the leading email delivery service on the market, but we may support more in the future. There are two environment variables to configure the email provider: EMAIL_PROVIDER , to set the type of provider and EMAIL_PROVIDER_PARAMS , a configuration dictionary containing required configuration keys.","title":"Setup email provider"},{"location":"self-hosting/setup-email-provider/#null-provider","text":"The NULL provider is the default one if you don't set any. It means that no transactional email will be sent . EMAIL_PROVIDER = NULL","title":"NULL provider"},{"location":"self-hosting/setup-email-provider/#postmark-provider","text":"Postmark provider will send transactional emails using Postmark . Parameter Description server_token Your Postmark Server API token EMAIL_PROVIDER = POSTMARK EMAIL_PROVIDER_PARAMS = {\"server_token\": \"XXX-XXX\"} Info You can read about different ways of setting environment variables in the dedicated section .","title":"Postmark provider"}]}